local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "spooky.pub",
   LoadingTitle = "spooky.pub",
   LoadingSubtitle = "by Spooky",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "spooky.pub"
   },
   Discord = {
      Enabled = true,
      Invite = "D3Yc4Fm9bJ", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

Rayfield:Notify({
   Title = "spooky.pub",
   Content = "spooky.pub has loaded successfully",
   Duration = 6.5,
   Image = 4483362458,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = "spooky.pub",
         Callback = function()
         print("spooky.pub is loaded")
      end
   },
},
})

local Tab = Window:CreateTab("Combat", 4483362458) -- Title, Image

local Section = Tab:CreateSection("HitBox")

local Toggle = Tab:CreateToggle({
   Name = "Enabled",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Collision",
   CurrentValue = false,
   Flag = "Toggle2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Slider = Tab:CreateSlider({
   Name = "Width",
   Range = {0, 8},
   Increment = 1,
   Suffix = "Bananas",
   CurrentValue = 6,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the slider changes
   -- The variable (Value) is a number which correlates to the value the slider is currently at
   end,
})

local Slider = Tab:CreateSlider({
   Name = "Height",
   Range = {0, 8},
   Increment = 1,
   Suffix = "Bananas",
   CurrentValue = 6,
   Flag = "Slider2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the slider changes
   -- The variable (Value) is a number which correlates to the value the slider is currently at
   end,
})

local Slider = Tab:CreateSlider({
   Name = "Transparency",
   Range = {0, 1},
   Increment = 0.1,
   Suffix = "Bananas",
   CurrentValue = 10,
   Flag = "Slider3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the slider changes
   -- The variable (Value) is a number which correlates to the value the slider is currently at
   end,
})

local Dropdown = Tab:CreateDropdown({
   Name = "Fabric:",
   Options = {"Fabric","SmoothPlastic","ForceField","Neon","Glass","CrackedLava","Foil","Sand"},
   CurrentOption = {"Fabric"},
   MultipleOptions = true,
   Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Option)
   -- The function that takes place when the selected option is changed
   -- The variable (Option) is a table of strings for the current selected options
   end,
})

local Dropdown = Tab:CreateDropdown({
   Name = "Bodypart:",
   Options = {"Head","Torso"},
   CurrentOption = {"Head"},
   MultipleOptions = true,
   Flag = "Dropdown2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Option)
   -- The function that takes place when the selected option is changed
   -- The variable (Option) is a table of strings for the current selected options
   end,
})

local Section = Tab:CreateSection("Hitsound")

local Dropdown = Tab:CreateDropdown({
   Name = "Hitsound:",
   Options = {"Default","Rust","Neverlose","Gamesense"},
   CurrentOption = {"Default"},
   MultipleOptions = true,
   Flag = "Dropdown3", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Option)
   -- The function that takes place when the selected option is changed
   -- The variable (Option) is a table of strings for the current selected options
   end,
})

local Tab = Window:CreateTab("Visuals", 4483362458) -- Title, Image

local Section = Tab:CreateSection("Player")



